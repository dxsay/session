package kr.or.ddit.session;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Enumeration;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

//Session 정보를 저장하는 서블릿
@WebServlet("/sessionRead.do")
public class SessionRead extends HttpServlet {
	private static final long serialVersionUID = 1L;

	
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		response.setCharacterEncoding("utf-8");
		response.setContentType("text/html; charset=utf-8");
		PrintWriter out = response.getWriter();
		
		
		//Session 정보 읽는 방법
		
		// 1. Session객체를 생성하거나 현재 Session 가져오기
			HttpSession session =request.getSession();
		
		//출력
		out.println("<html>");
		out.println("<head><meta charset='UTF-8'>");
		out.println("<title>Session 정보 읽기 연습</title></head>");

		out.println("<body>");
		out.println("<h3>지정된 Session 데이터 확인하기</h3><hr>");
		out.println("<h3>Session 데이터 1개 확인하기</h3>");
		
		/*
		 2. Session 데이터 읽기
		 
		 형식) Session객체.getAttribute("key값");
		 */
		String sessionValue =(String)session.getAttribute("testSession");
		
		//데이터 가져올 때 데이터가 없으면 보통 null값이 들어간다. 따라서 session에 데이터 유무를 검사해준다 null을 통해서 
		// null이면 세션값이 없다고하고
		 if(sessionValue ==null) {
			 out.println("<h3>testSession의 세션값은 없습니다.</h3>");
		 }else {
			 //데이터가 있으면 세션값을 출력해준다.
			 out.println("<h3>testSession의 세션값: "+sessionValue+"</h3>");
			 
		 }
		 out.println("<br<hr><br>");
		
		 
		 
		 //현재 세션에 있는 모든 값을 다 확인해보고 싶을 경우
		 out.println("<h3>전체 Session 데이터 확인하기</h3><hr>");
		 
		 //Session에 등록된 모든 key값들 가져오기
		 Enumeration<String> sessionKeys = session.getAttributeNames();
		 
		 out.println("<ol>"); //반복문 안에 들어가도록
		 int cnt=0;
		 //key값 갯수만큼 반복하기
		 //다음데이터가 있나 검사하는 것이다.
		 while(sessionKeys.hasMoreElements()) { //남아있는 데이터가 있느냐? 
			 cnt++; 
			 String key = sessionKeys.nextElement(); //남아있는 데이터가 있으면 포인터를 이동해서 다음데이터를 읽어라
			 out.println("<li>"+key+" : "+session.getAttribute(key) + "</li>");
		 }
		 //데이터 가 없을 때
		 if(cnt==0) out.println("<li>저장된 Session데이터가 하나도 없습니다.</li>");
		 out.println("</ol>");
		 out.println("<hr>");

		 //세션 ID ==> 세션을 구분하기 위한 고유한 값
		 out.println("세션: " + session.getId() +"<br>");
		 // 세션정보는 서버에 저장되고 서버는 많은  클라이언트가 사용한다.
		 //가각 클라이언트 가 데이터를 저장할 때마다 세션아이디 (프라이머리키처럼)가 생성된다 세션들을 구별할 수 있는 값이 필요한데 
		 // 그것이 세션 아이디이다.
		 
		 // 생성시간 ==> 1970년 1월 1일부터 경과한 시간(밀리세컨드 단위)
		 out.println("세션 생성 시간 : " + session.getCreationTime() +"<br>");
		 
		 // 가장 최근에 세션에 접근한 시간 ==>1970년 1월 1일부터 경과한 시간(밀리세컨드 단위)
		 out.println("세션에 최근 접근 시간 : " + session.getLastAccessedTime() +"<br>");
		 
		 //세션 유효시간 ==> 가장 최근에 접속한 시간부터 이 '유효시간'이 경과할 때까지
		 // 			세션이 유지된다(단위: 초) ==> 기본값은 30분
		 out.println("세션 유효 시간 : " + session.getMaxInactiveInterval() +"<br>");
		 
		 
		 out.println("<hr>");
		 out.println("<a href='"+ request.getContextPath()+"/session/sessionTest.jsp'>시작 문서로 이동</a>");
		
	
		 out.println("</body></html>");
		
		
		
		
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doGet(request, response);
	}

}
